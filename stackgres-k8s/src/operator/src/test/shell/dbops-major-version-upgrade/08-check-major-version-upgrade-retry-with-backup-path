#!/bin/sh

TARGET_BACKUP_PATH=test
CHECK=false
LINK=false
CLONE=false

. "$TEST_SHELL_PATH/dbops-major-version-upgrade/abstract-major-version-upgrade"

shell_unit_test() {
  shell_unit_test_dbops_major_version_upgrade
  check_dbops_result
}

mock kubectl kubectl_mock_overwrite

kubectl_mock_overwrite() {
  mokked
  case "$*" in
    ("get $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME --template={{ if .status.dbOps }}{{ if .status.dbOps.$OP_NAME }}true{{ end }}{{ end }}")
    printf true
    ;;
    ("get $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME --template={{ .status.dbOps.$OP_NAME.targetPostgresVersion }}")
    printf %s "$TARGET_VERSION"
    ;;
    ("get $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME --template={{ .status.dbOps.$OP_NAME.sourcePostgresVersion }}")
    printf %s "$SOURCE_VERSION"
    ;;
    ("get $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME --template={{ .status.dbOps.$OP_NAME.sourceSgPostgresConfig }}")
    printf %s "postgresconf"
    ;;
    ("get $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME --template={{ if .status.dbOps.majorVersionUpgrade.sourceBackupPath }}{{ .status.dbOps.majorVersionUpgrade.sourceBackupPath }}{{ end }}")
    printf %s "sgbackup.stackgres.io/$CLUSTER_NAMESPACE/$CLUSTER_NAME/${SOURCE_VERSION%.*}"
    ;;
    ("get $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME --template={{ .status.dbOps.$OP_NAME.sourceReplicationMode }}")
    printf %s async
    ;;
    ("get $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME --template={{ with .status.dbOps.$OP_NAME.initialInstances }}{{ . }}{{ end }}")
    printf '[test-0 test-1]'
    ;;
    ("get $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME --template={{ with .status.dbOps.$OP_NAME.primaryInstance }}{{ . }}{{ end }}")
    printf 'test-0'
    ;;
    ("patch $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME --type=json -p "*"{\"op\":\"replace\",\"path\":\"/status/dbOps/majorVersionUpgrade"*)
    ;;
    ("get $CLUSTER_CRD_NAME.$CRD_GROUP -n $CLUSTER_NAMESPACE $CLUSTER_NAME -o json")
      echo '{
              "apiVersion": "stackgres.io/v1",
              "kind": "SGCluster",
              "metadata": {
                  "name": "'"$CLUSTER_NAME"'",
                  "namespace": "'"$CLUSTER_NAMESPACE"'"
              },
              "spec": {
                  "instances": 2,
                  "postgres": {
                    "version": "11.8"
                  },
                  "sgInstanceProfile": "size-s",
                  "configurations": {
                    "sgBackupConfig": "test",
                    "backupPath": "test"
                  }
              },
              "status": {
                "dbOps": {
                  "majorVersionUpgrade": {
                    "check": false,
                    "clone": false,
                    "dataChecksum": '"$DATA_CHECKSUM"',
                    "encoding": "UTF8",
                    "initialInstances": [
                        "'"$CLUSTER_NAME-0"'",
                        "'"$CLUSTER_NAME-1"'"
                    ],
                    "link": false,
                    "locale": "C.UTF-8",
                    "primaryInstance": "'"$CLUSTER_NAME-0"'",
                    "sourcePostgresVersion": "11.8",
                    "targetPostgresVersion": "12.6"
                  }
                }
              }
            }'
    ;;
    ("replace --raw /apis/$CRD_GROUP/v1/namespaces/$CLUSTER_NAMESPACE/$CLUSTER_CRD_NAME/$CLUSTER_NAME -f"*)
    if [ "$(cat | jq -r '.spec.configurations.backupPath')" != test ]
    then
      return 1
    fi
    ;;
    *)
    not_mokked
    ;;
  esac
}
