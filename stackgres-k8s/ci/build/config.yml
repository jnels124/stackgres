.images:
  ci_image: &ci_image registry.gitlab.com/ongresinc/stackgres/ci:1.30
  jdk_build_image: &jdk_build_image registry.gitlab.com/ongresinc/stackgres/builder:1.9
  jdk_runtime_image: &jdk_runtime_image registry.access.redhat.com/ubi9/openjdk-21:1.21-3
  ubi8_micro_image: &ubi8_micro_image registry.access.redhat.com/ubi8-micro:8.10-15
  ubi9_minimal_image: &ubi9_minimal_image registry.access.redhat.com/ubi9-minimal:9.5-1731593028
  admin_ui_build_image: &admin_ui_build_image registry.access.redhat.com/ubi8/nodejs-20:1-69.1731463535
  admin_ui_nginx_image: &admin_ui_nginx_image registry.access.redhat.com/ubi8/nginx-124:1-35.1731463551
  pglambda_nodejs_image: &pglambda_nodejs_image registry.access.redhat.com/ubi8/nodejs-18:1-133.1731463548
platforms:
  - linux/x86_64
  - linux/aarch64
modules:
  parent-java: &parent-java
    type: java
    platform_dependent: true
    path: stackgres-k8s/src/.
    target_image: *ubi8_micro_image
    build_image: *jdk_build_image
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh
    sources:
      - stackgres-k8s/src/checks
    build_env: &mvn_build_env
      MAVEN_OPTS: |
        -Dhttps.protocols=TLSv1.2
        -Dorg.slf4j.simpleLogger.showDateTime=true
        -Djava.awt.headless=true
        -XX:+UseParallelGC
      MAVEN_CLI_OPTS: |
        --batch-mode
        --errors
        --show-version
        -Dmaven.repo.local=/project/.m2/repository
        -Dmaven.user.home=/project/.m2
        -DinstallAtEnd=true
        -DdeployAtEnd=true
        -Dsurefire.useFile=false
        -DtrimStackTrace=false
    build_commands:
      - 'sh stackgres-k8s/ci/build/update-build-pom.sh'
      - 'stackgres-k8s/src/mvnw $MAVEN_CLI_OPTS clean install -D skipTests -f "$MODULE_PATH/pom.xml.build" -N'
      - 'stackgres-k8s/src/mvnw $MAVEN_CLI_OPTS clean install -D skipTests -f "$MODULE_PATH/pom.xml.build" -pl checks'
    cache:
      - .m2/
    artifacts:
      - .m2/repository/io/stackgres/stackgres-parent
      - .m2/repository/io/stackgres/stackgres-checks
  operator-framework-java: &operator-framework-java
    <<: *parent-java
    path: stackgres-k8s/src/operator-framework/.
    target_image: null
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh operator-framework
    sources:
      - stackgres-k8s/src/operator-framework/src/main
    build_commands:
      - 'sh stackgres-k8s/ci/build/update-build-pom.sh'
      - 'stackgres-k8s/src/mvnw $MAVEN_CLI_OPTS clean install -D skipTests -f "$MODULE_PATH/pom.xml.build" -N'
    artifacts:
      - stackgres-k8s/src/operator-framework/target
      - .m2/repository/io/stackgres/stackgres-operator-framework
  operator-framework-java-test: &operator-framework-java-test
    <<: *operator-framework-java
    type: java-test
    path: stackgres-k8s/src/operator-framework/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh operator-framework
    sources:
      - stackgres-k8s/src/operator-framework/src/test
    build_commands:
      - 'sh stackgres-k8s/ci/build/update-build-pom.sh'
      - 'stackgres-k8s/src/mvnw $MAVEN_CLI_OPTS verify -P safer -f "$MODULE_PATH/pom.xml.build"'
    artifacts:
      - stackgres-k8s/src/operator-framework/target
  test-util-java:
    <<: *operator-framework-java
    path: stackgres-k8s/src/test-util/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh test-util
    sources:
      - stackgres-k8s/src/test-util/src/main
    artifacts:
      - stackgres-k8s/src/test-util/target
      - .m2/repository/io/stackgres/stackgres-test-util
  common-java:
    <<: *operator-framework-java
    path: stackgres-k8s/src/common/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh common
    sources:
      - stackgres-k8s/src/common/src/main
    artifacts:
      - stackgres-k8s/src/common/target
      - .m2/repository/io/stackgres/stackgres-common
  common-java-test:
    <<: *operator-framework-java-test
    path: stackgres-k8s/src/common/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh common
    sources:
      - stackgres-k8s/src/common/src/test
    artifacts:
      - stackgres-k8s/src/common/target
  operator-java:
    <<: *operator-framework-java
    path: stackgres-k8s/src/operator/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh operator
    sources:
      - stackgres-k8s/src/operator/src/main/java
      - stackgres-k8s/src/operator/src/main/resources
    artifacts:
      - stackgres-k8s/src/operator/target
      - .m2/repository/io/stackgres/stackgres-operator
  operator-java-test:
    <<: *operator-framework-java-test
    path: stackgres-k8s/src/operator/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh operator
    sources:
      - stackgres-k8s/src/operator/src/test
    artifacts:
      - stackgres-k8s/src/operator/target
  restapi-java:
    <<: *operator-framework-java
    path: stackgres-k8s/src/restapi/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh restapi
    sources:
      - stackgres-k8s/src/restapi/src/main/java
      - stackgres-k8s/src/restapi/src/main/resources
      - stackgres-k8s/src/restapi/src/main/swagger
    post_build_commands:
      - 'sh $SHELL_XTRACE stackgres-k8s/src/restapi/src/main/swagger/build.sh'
    artifacts:
      - stackgres-k8s/src/restapi/target
      - .m2/repository/io/stackgres/stackgres-restapi
  restapi-java-test:
    <<: *operator-framework-java-test
    path: stackgres-k8s/src/restapi/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh restapi
    sources:
      - stackgres-k8s/src/restapi/src/test
    artifacts:
      - stackgres-k8s/src/restapi/target
  jobs-java:
    <<: *operator-framework-java
    path: stackgres-k8s/src/jobs/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh jobs
    sources:
      - stackgres-k8s/src/jobs/src/main/java
      - stackgres-k8s/src/jobs/src/main/resources
    artifacts:
      - stackgres-k8s/src/jobs/target
      - .m2/repository/io/stackgres/stackgres-jobs
  jobs-java-test:
    <<: *operator-framework-java-test
    path: stackgres-k8s/src/jobs/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh jobs
    sources:
      - stackgres-k8s/src/jobs/src/test
    artifacts:
      - stackgres-k8s/src/jobs/target
  stream-java:
    <<: *operator-framework-java
    path: stackgres-k8s/src/stream/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh stream
    sources:
      - stackgres-k8s/src/stream/src/main/java
      - stackgres-k8s/src/stream/src/main/resources
    artifacts:
      - stackgres-k8s/src/stream/target
      - .m2/repository/io/stackgres/stackgres-stream
  stream-java-test:
    <<: *operator-framework-java-test
    path: stackgres-k8s/src/stream/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh stream
    sources:
      - stackgres-k8s/src/stream/src/test
    artifacts:
      - stackgres-k8s/src/stream/target
  cluster-controller-java:
    <<: *operator-framework-java
    path: stackgres-k8s/src/cluster-controller/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh cluster-controller
    sources:
      - stackgres-k8s/src/cluster-controller/src/main/java
      - stackgres-k8s/src/cluster-controller/src/main/resources
    artifacts:
      - stackgres-k8s/src/cluster-controller/target
      - .m2/repository/io/stackgres/stackgres-cluster-controller
  cluster-controller-java-test:
    <<: *operator-framework-java-test
    path: stackgres-k8s/src/cluster-controller/.
    filtered_sources:
      - sh stackgres-k8s/ci/build/redact-version.sh cluster-controller
    sources:
      - stackgres-k8s/src/cluster-controller/src/test
    artifacts:
      - stackgres-k8s/src/cluster-controller/target
  admin-ui:
    type: ui
    platform_dependent: true
    path: stackgres-k8s/src/admin-ui
    target_image: *ubi8_micro_image
    build_image: *admin_ui_build_image
    sources:
      - stackgres-k8s/src/admin-ui/babel.config.js
      - stackgres-k8s/src/admin-ui/build.sh
      - stackgres-k8s/src/admin-ui/npmw
      - stackgres-k8s/src/admin-ui/package.json
      - stackgres-k8s/src/admin-ui/vue.config.js
      - stackgres-k8s/src/admin-ui/public
      - stackgres-k8s/src/admin-ui/src
    build_commands:
      - cd stackgres-k8s/src/admin-ui
      - export HOME=/project
      - npm install --verbose --unsafe-perm
      - |
        ! grep -q 'LATER_COV' node_modules/prettycron/node_modules/later/index.js \
          || sed -i "s#^ *require\(.*LATER_COV.*\); *\$#require('./later');#" node_modules/prettycron/node_modules/later/index.js
      - npm run build
      - sh $SHELL_XTRACE build.sh
    cache:
      - stackgres-k8s/src/admin-ui/node_modules
    artifacts:
      - stackgres-k8s/src/admin-ui/target
  operator-native: &native
    type: native
    platform_dependent: true
    path: stackgres-k8s/src/operator
    target_image: *ubi8_micro_image
    build_image: *jdk_build_image
    build_env:
      <<: *mvn_build_env
    build_commands:
      - 'sh stackgres-k8s/ci/build/update-build-pom.sh'
      - 'stackgres-k8s/src/mvnw $MAVEN_CLI_OPTS package -DskipTests -P native -f "$MODULE_PATH/pom.xml.build" -N'
    cache:
      - .m2/
    artifacts:
      - stackgres-k8s/src/operator/target/stackgres-operator-runner
  restapi-native:
    <<: *native
    path: stackgres-k8s/src/restapi
    artifacts:
      - stackgres-k8s/src/restapi/target/stackgres-restapi-runner
  jobs-native:
    <<: *native
    path: stackgres-k8s/src/jobs
    artifacts:
      - stackgres-k8s/src/jobs/target/stackgres-jobs-runner
  stream-native:
    <<: *native
    path: stackgres-k8s/src/stream
    artifacts:
      - stackgres-k8s/src/stream/target/stackgres-stream-runner
  cluster-controller-native:
    <<: *native
    path: stackgres-k8s/src/cluster-controller
    artifacts:
      - stackgres-k8s/src/cluster-controller/target/stackgres-cluster-controller-runner
  operator-jvm-image: &operator-jvm-image
    type: jvm-image
    platform_dependent: true
    path: stackgres-k8s/src/operator
    target_image: *jdk_runtime_image
    dockerfile: &jvm-image-dockerfile
      path: stackgres-k8s/src/operator/src/main/docker/Dockerfile.jvm
      args: &jvm-image-args
        BASE_IMAGE: $TARGET_IMAGE_NAME
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh operator)
      seds:
        - "s#^\\( *COPY\\) \\+'#\\1 './$MODULE_PATH/#"
    artifacts: &operator-jvm-image-artifacts
      0: stackgres-k8s/src/operator/src/main/docker/LICENCE
      1: stackgres-k8s/src/operator/src/main/docker/stackgres-operator.jvm.sh
      2: stackgres-k8s/src/operator/target/quarkus-app
  restapi-jvm-image: &restapi-jvm-image
    <<: *operator-jvm-image
    path: stackgres-k8s/src/restapi
    dockerfile:
      <<: *jvm-image-dockerfile
      path: stackgres-k8s/src/restapi/src/main/docker/Dockerfile.jvm
      args:
        <<: *jvm-image-args
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh restapi)
    artifacts: &restapi-jvm-image-artifacts
      0: stackgres-k8s/src/restapi/src/main/docker/LICENCE
      1: stackgres-k8s/src/restapi/src/main/docker/stackgres-restapi.jvm.sh
      2: stackgres-k8s/src/restapi/target/quarkus-app
  jobs-jvm-image: &jobs-jvm-image
    <<: *operator-jvm-image
    path: stackgres-k8s/src/jobs
    dockerfile:
      <<: *jvm-image-dockerfile
      path: stackgres-k8s/src/jobs/src/main/docker/Dockerfile.jvm
      args:
        <<: *jvm-image-args
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh jobs)
    artifacts: &jobs-jvm-image-artifacts
      0: stackgres-k8s/src/jobs/src/main/docker/LICENCE
      1: stackgres-k8s/src/jobs/src/main/docker/stackgres-jobs.jvm.sh
      2: stackgres-k8s/src/jobs/target/quarkus-app
  stream-jvm-image: &stream-jvm-image
    <<: *operator-jvm-image
    path: stackgres-k8s/src/stream
    dockerfile:
      <<: *jvm-image-dockerfile
      path: stackgres-k8s/src/stream/src/main/docker/Dockerfile.jvm
      args:
        <<: *jvm-image-args
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh stream)
    artifacts: &stream-jvm-image-artifacts
      0: stackgres-k8s/src/stream/src/main/docker/LICENCE
      1: stackgres-k8s/src/stream/src/main/docker/stackgres-stream.jvm.sh
      2: stackgres-k8s/src/stream/target/quarkus-app
  cluster-controller-jvm-image: &cluster-controller-jvm-image
    <<: *operator-jvm-image
    path: stackgres-k8s/src/cluster-controller
    dockerfile:
      <<: *jvm-image-dockerfile
      path: stackgres-k8s/src/cluster-controller/src/main/docker/Dockerfile.jvm
      args:
        <<: *jvm-image-args
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh cluster-controller)
    artifacts: &cluster-controller-jvm-image-artifacts
      0: stackgres-k8s/src/cluster-controller/src/main/docker/LICENCE
      1: stackgres-k8s/src/cluster-controller/src/main/docker/stackgres-cluster-controller.jvm.sh
      2: stackgres-k8s/src/cluster-controller/target/quarkus-app
  admin-ui-image: &admin-ui-image
    type: ui-image
    platform_dependent: true
    path: stackgres-k8s/src/admin-ui
    target_image: *admin_ui_nginx_image
    dockerfile:
      path: stackgres-k8s/src/admin-ui/docker/Dockerfile
      args:
        BASE_IMAGE: $TARGET_IMAGE_NAME
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh)
      seds:
        - "s#^\\( *COPY\\) \\+'#\\1 './$MODULE_PATH/#"
    artifacts: &admin-ui-image-artifacts
      0: stackgres-k8s/src/admin-ui/docker/LICENCE
      1: stackgres-k8s/src/admin-ui/target/public
  operator-native-image: &operator-native-image
    type: native-image
    platform_dependent: true
    path: stackgres-k8s/src/operator
    target_image: *ubi9_minimal_image
    dockerfile: &native-image-dockerfile
      path: stackgres-k8s/src/operator/src/main/docker/Dockerfile.native
      args: &native-image-args
        BASE_IMAGE: $TARGET_IMAGE_NAME
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh operator)
      seds:
        - "s#^\\( *COPY\\) \\+'#\\1 './$MODULE_PATH/#"
    artifacts: &operator-native-image-artifacts
      0: stackgres-k8s/src/operator/src/main/docker/LICENCE
      1: stackgres-k8s/src/operator/target/stackgres-operator-runner
      2: stackgres-k8s/src/operator/src/main/docker/stackgres-operator.native.sh
  restapi-native-image: &restapi-native-image
    <<: *operator-native-image
    path: stackgres-k8s/src/restapi
    dockerfile:
      <<: *native-image-dockerfile
      path: stackgres-k8s/src/restapi/src/main/docker/Dockerfile.native
      args:
        <<: *native-image-args
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh restapi)
    artifacts: &restapi-native-image-artifacts
      0: stackgres-k8s/src/restapi/src/main/docker/LICENCE
      1: stackgres-k8s/src/restapi/target/stackgres-restapi-runner
      2: stackgres-k8s/src/restapi/src/main/docker/stackgres-restapi.native.sh
  jobs-native-image: &jobs-native-image
    <<: *operator-native-image
    path: stackgres-k8s/src/jobs
    dockerfile:
      <<: *native-image-dockerfile
      path: stackgres-k8s/src/jobs/src/main/docker/Dockerfile.native
      args:
        <<: *native-image-args
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh jobs)
    artifacts: &jobs-native-image-artifacts
      0: stackgres-k8s/src/jobs/src/main/docker/LICENCE
      1: stackgres-k8s/src/jobs/target/stackgres-jobs-runner
      2: stackgres-k8s/src/jobs/src/main/docker/stackgres-jobs.native.sh
  stream-native-image: &stream-native-image
    <<: *operator-native-image
    path: stackgres-k8s/src/stream
    dockerfile:
      <<: *native-image-dockerfile
      path: stackgres-k8s/src/stream/src/main/docker/Dockerfile.native
      args:
        <<: *native-image-args
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh stream)
    artifacts: &stream-native-image-artifacts
      0: stackgres-k8s/src/stream/src/main/docker/LICENCE
      1: stackgres-k8s/src/stream/target/stackgres-stream-runner
      2: stackgres-k8s/src/stream/src/main/docker/stackgres-stream.native.sh
  cluster-controller-native-image: &cluster-controller-native-image
    <<: *operator-native-image
    path: stackgres-k8s/src/cluster-controller
    dockerfile:
      <<: *native-image-dockerfile
      path: stackgres-k8s/src/cluster-controller/src/main/docker/Dockerfile.native
      args:
        <<: *native-image-args
        STACKGRES_VERSION: $(sh stackgres-k8s/ci/build/version.sh cluster-controller)
    artifacts: &cluster-controller-native-image-artifacts
      0: stackgres-k8s/src/cluster-controller/src/main/docker/LICENCE
      1: stackgres-k8s/src/cluster-controller/target/stackgres-cluster-controller-runner
      2: stackgres-k8s/src/cluster-controller/src/main/docker/stackgres-cluster-controller.native.sh
  helm-packages: &helm-packages
    type: helm
    target_image: *ubi8_micro_image
    filtered_sources:
      - |
        sed 's/^\(version\|appVersion\): "\([0-9]\+\.[0-9]\+\.[0-9]\+\)\(-.*\)\?"$/\1: "\2"/' stackgres-k8s/install/helm/stackgres-operator/Chart.yaml
      - |
        sed 's/^\(\s*tag\): .*$/\1: REDACTED/' stackgres-k8s/install/helm/stackgres-operator/values.yaml
      - |
        sed 's/^\(version\|appVersion\): "\([0-9]\+\.[0-9]\+\.[0-9]\+\)\(-.*\)\?"$/\1: "\2"/' stackgres-k8s/install/helm/stackgres-cluster/Chart.yaml
    sources:
      0: stackgres-k8s/install/helm/stackgres-operator/README.md
      1: stackgres-k8s/install/helm/stackgres-operator/templates
      2: stackgres-k8s/install/helm/stackgres-operator/grafana-dashboard.json
      3: stackgres-k8s/install/helm/stackgres-operator/values.schema.json
      4: stackgres-k8s/install/helm/stackgres-operator/.helmignore
      5: stackgres-k8s/install/helm/stackgres-operator/extensions-cache-conciliator.sh
      6: stackgres-k8s/install/helm/stackgres-cluster/README.md
      7: stackgres-k8s/install/helm/stackgres-cluster/templates
      8: stackgres-k8s/install/helm/stackgres-cluster/cluster-restart.sh
      9: stackgres-k8s/install/helm/stackgres-cluster/.helmignore
      10: stackgres-k8s/install/helm/build-helm-packages.sh
      11: stackgres-k8s/src/common/src/main/resources/crds
    build_image: *ci_image
    build_commands:
      - export HOME=/project
      - sh $SHELL_XTRACE stackgres-k8s/install/helm/build-helm-packages.sh
    artifacts:
      - stackgres-k8s/install/helm/target/packages
  helm-templates: &helm-templates
    type: helm
    target_image: *ubi8_micro_image
    filtered_sources:
      - |
        sed 's/^\(version\|appVersion\): "\([0-9]\+\.[0-9]\+\.[0-9]\+\)\(-.*\)\?"$/\1: "\2"/' stackgres-k8s/install/helm/stackgres-operator/Chart.yaml
      - |
        sed 's/^\(\s*tag\): .*$/\1: REDACTED/' stackgres-k8s/install/helm/stackgres-operator/values.yaml
      - |
        sed 's/^\(version\|appVersion\): "\([0-9]\+\.[0-9]\+\.[0-9]\+\)\(-.*\)\?"$/\1: "\2"/' stackgres-k8s/install/helm/stackgres-cluster/Chart.yaml
    sources:
      0: stackgres-k8s/install/helm/stackgres-operator/README.md
      1: stackgres-k8s/install/helm/stackgres-operator/templates
      2: stackgres-k8s/install/helm/stackgres-operator/grafana-dashboard.json
      3: stackgres-k8s/install/helm/stackgres-operator/values.schema.json
      4: stackgres-k8s/install/helm/stackgres-operator/.helmignore
      5: stackgres-k8s/install/helm/stackgres-operator/extensions-cache-conciliator.sh
      6: stackgres-k8s/install/helm/stackgres-cluster/README.md
      7: stackgres-k8s/install/helm/stackgres-cluster/templates
      8: stackgres-k8s/install/helm/stackgres-cluster/cluster-restart.sh
      9: stackgres-k8s/install/helm/stackgres-cluster/.helmignore
      10: stackgres-k8s/install/helm/build-helm-templates.sh
      11: stackgres-k8s/src/common/src/main/resources/crds
    build_image: *ci_image
    build_commands:
      - export HOME=/project
      - sh $SHELL_XTRACE stackgres-k8s/install/helm/build-helm-templates.sh
    artifacts:
      - stackgres-k8s/install/helm/target/templates
  operator-bundle: &operator-bundle
    type: operator-bundle
    target_image: *ubi8_micro_image
    sources:
      - stackgres-k8s/install/operator-sdk/stackgres-operator
    build_image: *ci_image
    build_commands:
      - make -C stackgres-k8s/install/operator-sdk/stackgres-operator bundle
    artifacts:
      - stackgres-k8s/install/operator-sdk/stackgres-operator/bundle
  operator-bundle-image: &operator-bundle-image
    type: operator-bundle-image
    platform_dependent: true
    path: stackgres-k8s/install/operator-sdk/stackgres-operator
    target_image: scratch
    dockerfile:
      path: stackgres-k8s/install/operator-sdk/stackgres-operator/Dockerfile.bundle
      args:
        BASE_IMAGE: $TARGET_IMAGE_NAME
    artifacts:
      - stackgres-k8s/install/operator-sdk/stackgres-operator
  operator-openshift-bundle: &operator-openshift-bundle
    type: operator-bundle
    target_image: *ubi8_micro_image
    sources:
      - stackgres-k8s/install/operator-sdk/stackgres-operator
    build_image: *ci_image
    build_commands:
      - make -C stackgres-k8s/install/operator-sdk/stackgres-operator bundle-openshift
    artifacts:
      - stackgres-k8s/install/operator-sdk/stackgres-operator/bundle
  operator-openshift-bundle-image: &operator-openshift-bundle-image
    type: operator-bundle-image
    platform_dependent: true
    path: stackgres-k8s/install/operator-sdk/stackgres-operator
    target_image: scratch
    dockerfile:
      path: stackgres-k8s/install/operator-sdk/stackgres-operator/Dockerfile.bundle
      args:
        BASE_IMAGE: $TARGET_IMAGE_NAME
    artifacts:
      - stackgres-k8s/install/operator-sdk/stackgres-operator
  documentation:
    type: documentation
    target_image: *ubi8_micro_image
    sources:
      - doc/build.sh
      - doc/config.toml
      - doc/content
      - doc/demo
      - doc/LICENSE.md
      - doc/themes
      - stackgres-k8s/src/pom.xml
      - stackgres-k8s/src/common/src/main/resources/crds
    build_image: *ci_image
    build_env:
      DOCUMENTATION_BASE_URL: '$DOCUMENTATION_BASE_URL'
      DOCUMENTATION_EXTRA_PATH: '$DOCUMENTATION_EXTRA_PATH'
    build_commands:
      - sh -x doc/build.sh
      - |
        STACKGRES_VERSION="$(sh stackgres-k8s/ci/build/version.sh)"
        STACKGRES_DOC_VERSION="$(
          printf "%s" "$STACKGRES_VERSION" | cut -d . -f 1-2)$(printf "%s" "$STACKGRES_VERSION" \
            | grep -q ".-SNAPSHOT$" && printf "%s" "-dev" || true)"
      - mkdir -p "doc/public/$DOCUMENTATION_EXTRA_PATH$STACKGRES_VERSION"
      - hugo -v --source doc --destination "$(pwd)/doc/public/$DOCUMENTATION_EXTRA_PATH$STACKGRES_DOC_VERSION" --baseURL="$DOCUMENTATION_BASE_URL/$DOCUMENTATION_EXTRA_PATH$STACKGRES_DOC_VERSION"
    artifacts:
      - doc/data
      - doc/generated
      - doc/public
  operator-jvm-release-image:
    <<: *operator-jvm-image
    type: jvm-release-image
    artifacts:
      <<: *operator-jvm-image-artifacts
      999: stackgres-k8s/src/operator/pom.xml
  restapi-jvm-release-image:
    <<: *restapi-jvm-image
    type: jvm-release-image
    artifacts:
      <<: *restapi-jvm-image-artifacts
      999: stackgres-k8s/src/restapi/pom.xml
  jobs-jvm-release-image:
    <<: *jobs-jvm-image
    type: jvm-release-image
    artifacts:
      <<: *jobs-jvm-image-artifacts
      999: stackgres-k8s/src/jobs/pom.xml
  stream-jvm-release-image:
    <<: *stream-jvm-image
    type: jvm-release-image
    artifacts:
      <<: *stream-jvm-image-artifacts
      999: stackgres-k8s/src/stream/pom.xml
  cluster-controller-jvm-release-image:
    <<: *cluster-controller-jvm-image
    type: jvm-release-image
    artifacts:
      <<: *cluster-controller-jvm-image-artifacts
      999: stackgres-k8s/src/cluster-controller/pom.xml
  admin-ui-release-image:
    <<: *admin-ui-image
    type: ui-image
    artifacts:
      <<: *admin-ui-image-artifacts
      999: stackgres-k8s/src/pom.xml
  operator-native-release-image:
    <<: *operator-native-image
    type: native-release-image
    artifacts:
      <<: *operator-native-image-artifacts
      999: stackgres-k8s/src/operator/pom.xml
  restapi-native-release-image:
    <<: *restapi-native-image
    type: native-release-image
    artifacts:
      <<: *restapi-native-image-artifacts
      999: stackgres-k8s/src/restapi/pom.xml
  jobs-native-release-image:
    <<: *jobs-native-image
    type: native-release-image
    artifacts:
      <<: *jobs-native-image-artifacts
      999: stackgres-k8s/src/jobs/pom.xml
  stream-native-release-image:
    <<: *stream-native-image
    type: native-release-image
    artifacts:
      <<: *stream-native-image-artifacts
      999: stackgres-k8s/src/stream/pom.xml
  cluster-controller-native-release-image:
    <<: *cluster-controller-native-image
    type: native-release-image
    artifacts:
      <<: *cluster-controller-native-image-artifacts
      999: stackgres-k8s/src/cluster-controller/pom.xml
  helm-release-packages:
    <<: *helm-packages
    type: helm-release
    filtered_sources: null
    sources:
      997: stackgres-k8s/install/helm/stackgres-operator
      998: stackgres-k8s/install/helm/stackgres-cluster
      999: stackgres-k8s/src/pom.xml
  helm-release-templates:
    <<: *helm-templates
    type: helm-release
    filtered_sources: null
    sources:
      997: stackgres-k8s/install/helm/stackgres-operator
      998: stackgres-k8s/install/helm/stackgres-cluster
      999: stackgres-k8s/src/pom.xml
  operator-release-bundle:
    <<: *operator-bundle
    type: operator-release-bundle
  operator-release-bundle-image:
    <<: *operator-bundle-image
    type: operator-release-bundle-image
  operator-release-openshift-bundle:
    <<: *operator-openshift-bundle
    type: operator-release-bundle
  operator-release-openshift-bundle-image:
    <<: *operator-openshift-bundle-image
    type: operator-release-bundle-image
  pglambda-javascript-image:
    type: pglambda
    platform_dependent: true
    path: stackgres-k8s/src/stream
    target_image: *pglambda_nodejs_image
    dockerfile:
      path: stackgres-k8s/src/stream/src/main/docker/pglambda/javascript/Dockerfile
      args:
        BASE_IMAGE: $TARGET_IMAGE_NAME
      seds:
        - "s#^\\( *COPY\\) \\+'#\\1 './$MODULE_PATH/#"
    artifacts:
      0: stackgres-k8s/src/stream/src/main/docker/LICENCE
      1: stackgres-k8s/src/stream/src/main/docker/pglambda/javascript/index.js
      2: stackgres-k8s/src/stream/src/main/docker/pglambda/javascript/package.json
      3: stackgres-k8s/src/stream/src/main/docker/pglambda/javascript/package-lock.json.out
stages:
  - parent-java: null
  - operator-framework-java: parent-java
  - test-util-java: operator-framework-java
  - common-java: test-util-java
  - operator-java: common-java
  - restapi-java: common-java
  - jobs-java: common-java
  - stream-java: common-java
  - cluster-controller-java: common-java
  - operator-framework-java-test: operator-framework-java
  - common-java-test: common-java
  - operator-java-test: operator-java
  - restapi-java-test: restapi-java
  - jobs-java-test: jobs-java
  - stream-java-test: stream-java
  - cluster-controller-java-test: cluster-controller-java
  - admin-ui: restapi-java
  - operator-jvm-image: operator-java
  - restapi-jvm-image: restapi-java
  - jobs-jvm-image: jobs-java
  - stream-jvm-image: stream-java
  - cluster-controller-jvm-image: cluster-controller-java
  - admin-ui-image: admin-ui
  - operator-native: operator-java
  - restapi-native: restapi-java
  - jobs-native: jobs-java
  - stream-native: stream-java
  - cluster-controller-native: cluster-controller-java
  - operator-native-image: operator-native
  - restapi-native-image: restapi-native
  - jobs-native-image: jobs-native
  - stream-native-image: stream-native
  - cluster-controller-native-image: cluster-controller-native
  - helm-packages: null
  - helm-templates: null
  - operator-bundle: helm-packages
  - operator-bundle-image: operator-bundle
  - operator-openshift-bundle: helm-packages
  - operator-openshift-bundle-image: operator-openshift-bundle
  - documentation: restapi-java
  - operator-jvm-release-image: operator-java
  - restapi-jvm-release-image: restapi-java
  - jobs-jvm-release-image: jobs-java
  - stream-jvm-release-image: stream-java
  - cluster-controller-jvm-release-image: cluster-controller-java
  - admin-ui-release-image: admin-ui
  - operator-native-release-image: operator-native
  - restapi-native-release-image: restapi-native
  - jobs-native-release-image: jobs-native
  - stream-native-release-image: stream-native
  - cluster-controller-native-release-image: cluster-controller-native
  - helm-release-packages: null
  - helm-release-templates: null
  - operator-release-bundle: helm-release-packages
  - operator-release-bundle-image: operator-release-bundle
  - operator-release-openshift-bundle: helm-release-packages
  - operator-release-openshift-bundle-image: operator-release-openshift-bundle
  - pglambda-javascript-image: null
